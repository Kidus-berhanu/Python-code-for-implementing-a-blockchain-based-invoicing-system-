import hashlib

class Block:
    def __init__(self, previous_hash, data):
        self.previous_hash = previous_hash
        self.data = data
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        return hashlib.sha256(self.previous_hash + self.data).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block("0", "0")

    def add_block(self, data):
        previous_hash = self.chain[-1].hash
        block = Block(previous_hash, data)
        self.chain.append(block)

    def verify_chain(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]

            if current_block.hash != current_block.calculate_hash():
                return False

            if current_block.previous_hash != previous_block.hash:
                return False

        return True

# Create a new blockchain
blockchain = Blockchain()

# Add some blocks to the chain
blockchain.add_block("Invoice 1")
blockchain.add_block("Invoice 2")
blockchain.add_block("Invoice 3")

# Verify the integrity of the chain
if blockchain.verify_chain():
    print("The blockchain is valid.")
else:
    print("The blockchain is not valid.")
